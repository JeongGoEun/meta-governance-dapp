{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addResizeListener = addResizeListener;\nexports.removeResizeListener = removeResizeListener;\n/** Using lodash/throttle would increase UMD size by over 4 kB over this inline addition */\n\nfunction throttle(func, wait) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var context = void 0,\n      args = void 0,\n      result = void 0,\n      previous = void 0,\n      timeout = void 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n\n    if (!timeout) {\n      context = args = null;\n    }\n  }\n\n  return function () {\n    var now = Date.now();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = now;\n      result = func.apply(context, args);\n\n      if (!timeout) {\n        context = args = null;\n      }\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\nvar resizeCallbacks = [];\n/** optimized only to be called on panels that actively can do transitions */\n\nfunction triggerResize(callback) {\n  var _callback$getState = callback.getState(),\n      animateContent = _callback$getState.animateContent,\n      checked = _callback$getState.checked;\n\n  if (animateContent === 'height' && checked || animateContent === 'marginTop' && !checked) {\n    callback();\n  }\n}\n/** execute only five times per second: this ought to be a pretty good balance between performance vs. humanity */\n\n\nvar onResize = throttle(function onResize() {\n  resizeCallbacks.forEach(triggerResize);\n}, 200, {\n  leading: false\n});\n\nfunction addResizeListener(callback) {\n  if (resizeCallbacks.length === 0) {\n    window.addEventListener('resize', onResize, false);\n  }\n\n  if (!resizeCallbacks.includes(callback)) {\n    resizeCallbacks.push(callback);\n  }\n}\n\nfunction removeResizeListener(callback) {\n  var index = resizeCallbacks.indexOf(callback);\n\n  if (~index) {\n    resizeCallbacks.splice(index, 1);\n  }\n\n  if (resizeCallbacks.length === 0) {\n    window.removeEventListener('resize', onResize, false);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}