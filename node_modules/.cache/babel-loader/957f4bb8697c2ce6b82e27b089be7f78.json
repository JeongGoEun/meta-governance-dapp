{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bemClassName = bemClassName;\n/*\n * Generates BEM convention style class names and decorates with given modifiers.\n * @param {object} blockElements Index of space separated classes representing block and element level items of BEM.\n *                               May also include classes beginning with a separator which will be extended.\n * @param {string} key Item to pick from blockElements.\n * @param {array} modifiers List of modifiers to use.\n * @param {string} separator Separator to use between block-element and a modifier.\n * @return {string} className where the first item in space separated list is extended with given modifiers.\n */\n\nfunction bemClassName(blockElements, key, modifiers) {\n  var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '--';\n  var blockElement = blockElements && blockElements[key] || null; // we prefer strings here\n\n  if (blockElement == null) {\n    return null;\n  } else if (typeof blockElement !== 'string') {\n    blockElement = String(blockElement);\n  }\n\n  var otherClasses = '';\n  var i = blockElement.indexOf(' '); // separate main block-element from other block-elements and separator-modifiers\n\n  if (i >= 0) {\n    otherClasses = blockElement.slice(i);\n    blockElement = blockElement.slice(0, i);\n  } // we need this often enough\n\n\n  var modifierPrefix = ' ' + blockElement + separator; // prefix separator-modifiers with the block-element\n\n  if (otherClasses && separator) {\n    var spaceAndSeparator = ' ' + separator; // a case where for loop seems a nicer choice than generating a \"replace all\" RegExp\n\n    for (i = otherClasses.indexOf(spaceAndSeparator); i >= 0; i = otherClasses.indexOf(spaceAndSeparator, i + blockElement.length)) {\n      otherClasses = otherClasses.replace(spaceAndSeparator, modifierPrefix);\n    }\n  }\n\n  if (!Array.isArray(modifiers)) {\n    return blockElement + otherClasses;\n  } // generates the final className and includes given modifiers from the array\n\n\n  return modifiers.reduce(function (className, modifier) {\n    if (modifier != null) {\n      return className + modifierPrefix + modifier;\n    } else {\n      return className;\n    }\n  }, blockElement) + otherClasses;\n}","map":null,"metadata":{},"sourceType":"script"}