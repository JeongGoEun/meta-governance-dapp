{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { constants } from '../constants';\nimport { addressesURL, wrongRepoAlert } from './helpers';\nvar TESTNET_ADDRESSES = {};\n\nfunction getContractsAddresses(_x) {\n  return _getContractsAddresses.apply(this, arguments);\n}\n\nfunction _getContractsAddresses() {\n  _getContractsAddresses = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(branch) {\n    var addr, response, contracts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            addr = addressesURL(branch);\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(addr);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", wrongRepoAlert(addr));\n\n          case 10:\n            _context.next = 12;\n            return response.json();\n\n          case 12:\n            contracts = _context.sent;\n            console.log('contract addresses', contracts);\n            _context.t1 = branch;\n            _context.next = _context.t1 === 'testnet' ? 17 : 19;\n            break;\n\n          case 17:\n            TESTNET_ADDRESSES = contracts;\n            return _context.abrupt(\"break\", 21);\n\n          case 19:\n            TESTNET_ADDRESSES = contracts;\n            return _context.abrupt(\"break\", 21);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[1, 7]]);\n  }));\n  return _getContractsAddresses.apply(this, arguments);\n}\n\nfunction getAddresses(netId) {\n  switch (netId) {\n    case constants.NETID_TESTNET:\n      return TESTNET_ADDRESSES;\n\n    default:\n      return TESTNET_ADDRESSES;\n  }\n}\n\nexport { getContractsAddresses, getAddresses };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/addresses.js"],"names":["constants","addressesURL","wrongRepoAlert","TESTNET_ADDRESSES","getContractsAddresses","branch","addr","fetch","response","json","contracts","console","log","getAddresses","netId","NETID_TESTNET"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,WAA7C;AAEA,IAAIC,iBAAiB,GAAG,EAAxB;;SAEeC,qB;;;;;;;2BAAf,iBAAqCC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,IADN,GACaL,YAAY,CAACI,MAAD,CADzB;AAAA;AAAA;AAAA,mBAIqBE,KAAK,CAACD,IAAD,CAJ1B;;AAAA;AAIIE,YAAAA,QAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAMWN,cAAc,CAACI,IAAD,CANzB;;AAAA;AAAA;AAAA,mBASwBE,QAAQ,CAACC,IAAT,EATxB;;AAAA;AASMC,YAAAA,SATN;AAUEC,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,SAAlC;AAVF,0BAYUL,MAZV;AAAA,4CAaS,SAbT;AAAA;;AAAA;AAcMF,YAAAA,iBAAiB,GAAGO,SAApB;AAdN;;AAAA;AAiBMP,YAAAA,iBAAiB,GAAGO,SAApB;AAjBN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAQA,KAAR;AACE,SAAKd,SAAS,CAACe,aAAf;AACE,aAAOZ,iBAAP;;AACF;AACE,aAAOA,iBAAP;AAJJ;AAMD;;AAED,SACEC,qBADF,EAEES,YAFF","sourcesContent":["import { constants } from '../constants';\nimport { addressesURL, wrongRepoAlert } from './helpers';\n\nlet TESTNET_ADDRESSES = {};\n\nasync function getContractsAddresses(branch) {\n  let addr = addressesURL(branch);\n  let response;\n  try {\n    response = await fetch(addr);\n  } catch (e) {\n    return wrongRepoAlert(addr);\n  }\n\n  let contracts = await response.json()\n  console.log('contract addresses', contracts);\n\n  switch (branch) {\n    case 'testnet':\n      TESTNET_ADDRESSES = contracts;\n      break;\n    default:\n      TESTNET_ADDRESSES = contracts;\n      break;\n  }\n}\n\nfunction getAddresses(netId) {\n  switch (netId) {\n    case constants.NETID_TESTNET:\n      return TESTNET_ADDRESSES;\n    default:\n      return TESTNET_ADDRESSES;\n  }\n}\n\nexport {\n  getContractsAddresses,\n  getAddresses\n}"]},"metadata":{},"sourceType":"module"}