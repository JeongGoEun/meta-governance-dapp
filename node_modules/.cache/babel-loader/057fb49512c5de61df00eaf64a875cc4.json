{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _contextSubscribe = require('../lib/contextSubscribe');\n\nvar _state = require('../lib/state');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar tabbordionInstances = 0;\nvar tabbordionUniqId = 0;\n\nfunction getStateBem(props) {\n  return {\n    bemModifiers: props.bemModifiers,\n    bemSeparator: props.bemSeparator,\n    blockElements: props.blockElements\n  };\n}\n\nfunction getStateTabbordion(context, props, state) {\n  var panels = (0, _state.getArray)(state.stateful ? state.panels : props.panels);\n  return {\n    animateContent: props.animateContent,\n    checkedPanels: panels.filter(_state.getChecked).map(_state.getIndex),\n    disabledPanels: panels.filter(_state.getDisabled).map(_state.getIndex),\n    firstVisiblePanel: context.firstVisibleIndex,\n    lastVisiblePanel: context.lastVisibleIndex,\n    panelName: props.name || context.uniqId,\n    panelType: props.mode === 'multiple' ? 'checkbox' : 'radio',\n    tabbordionId: props.id || context.uniqId\n  };\n}\n\nfunction identity(value) {\n  return value;\n}\n\nvar Tabbordion = function (_PureComponent) {\n  _inherits(Tabbordion, _PureComponent);\n\n  function Tabbordion(props) {\n    _classCallCheck(this, Tabbordion);\n\n    var _this = _possibleConstructorReturn(this, (Tabbordion.__proto__ || Object.getPrototypeOf(Tabbordion)).call(this, props));\n\n    tabbordionInstances++;\n    _this.uniqId = 'tabbordion-' + tabbordionUniqId;\n    tabbordionUniqId++;\n    _this.getNextState = _this.getNextState.bind(_this);\n    _this.onChange = _this.onChange.bind(_this);\n    _this.firstVisibleIndex = null;\n    _this.lastVisibleIndex = null; // panels always overrides initialPanels\n\n    _this.state = _this.getNextState(props, {\n      stateful: false\n    }, Array.isArray(props.panels) ? props.panels : props.initialPanels); // context subscribers\n\n    _this.subscribers = {\n      bem: [],\n      tabbordion: []\n    };\n    _this.childContext = {\n      bem: {\n        getState: function getState() {\n          return _this.bemState;\n        },\n        subscribe: (0, _contextSubscribe.addSubscriber)(_this.subscribers.bem),\n        unsubscribe: (0, _contextSubscribe.removeSubscriber)(_this.subscribers.bem)\n      },\n      tabbordion: {\n        getState: function getState() {\n          return _this.tabbordionState;\n        },\n        onChangePanel: _this.onChange,\n        subscribe: (0, _contextSubscribe.addSubscriber)(_this.subscribers.tabbordion),\n        unsubscribe: (0, _contextSubscribe.removeSubscriber)(_this.subscribers.tabbordion)\n      }\n    };\n    _this.bemState = getStateBem(props);\n    _this.tabbordionState = getStateTabbordion(_this, props, _this.state);\n    return _this;\n  }\n\n  _createClass(Tabbordion, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var nextState = this.getNextState(nextProps, this.state); // only update if there were changes to the local component state\n\n      if (nextState !== this.state) {\n        this.setState(nextState);\n      }\n\n      var bemState = getStateBem(nextProps);\n\n      if ((0, _state.isShallowlyDifferent)(bemState, this.bemState)) {\n        this.subscribers.bem.forEach(function (component) {\n          return component.forceUpdate();\n        });\n        this.bemState = bemState;\n      }\n\n      var tabbordionState = getStateTabbordion(this, nextProps, nextState);\n\n      if ((0, _state.isShallowlyDifferent)(tabbordionState, this.tabbordionState)) {\n        this.subscribers.tabbordion.forEach(function (component) {\n          return component.forceUpdate();\n        });\n        this.tabbordionState = tabbordionState;\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      tabbordionInstances--;\n      if (tabbordionInstances === 0) tabbordionUniqId = 0;\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return this.childContext;\n    }\n    /*\n     * Controls props and does those nasty little staties we kills them My Precious, *gollum* *gollum*\n     * @param {object} props Props received by the component\n     * @param {object} prevState State contained in the component\n     * @param {array} initialPanels Initial panels state when component is mounted as a stateful component\n     * @return {object} State to be used by the component\n     */\n\n  }, {\n    key: 'getNextState',\n    value: function getNextState(props, prevState, initialPanels) {\n      var panels = (0, _state.getArray)(prevState.stateful ? prevState.panels : initialPanels || props.panels);\n      var panelProps = [];\n      var usedIndexes = [];\n      var invalidIndexes = [];\n      var allowMultiChecked = props.mode === 'multiple'; // fragments force us to do some recursive looping to find our actual children as React.Children does not do it\n\n      var childPool = [props.children]; // this logic probably needs to be refactored so that panels register to tabbordion\n\n      while (childPool.length) {\n        _react.Children.forEach(childPool.shift(), function (child) {\n          if (child == null || !child.type) {\n            return;\n          }\n\n          var props = child.props || child._store && child._store.props || {};\n\n          if (child.type === _react2.default.Fragment && props.children) {\n            childPool.push(props.children);\n          } else if (child.type.contextTypes && child.type.contextTypes.tabbordion) {\n            // use false to mark panels with invalid index\n            var index = props.index != null ? props.index : false; // missing index and duplicates are invalid\n\n            var isInvalidIndex = index === false || usedIndexes.includes(index);\n\n            if (isInvalidIndex) {\n              invalidIndexes.push(panelProps.length);\n            } else {\n              usedIndexes.push(index);\n            }\n\n            panelProps.push({\n              checked: props.checked,\n              disabled: props.disabled,\n              index: isInvalidIndex ? false : index,\n              visible: props.visible\n            });\n          }\n        });\n      } // time to fix invalid index values\n\n\n      var unusedIndex = 0;\n\n      while (invalidIndexes.length > 0) {\n        // find the next usable index value\n        while (usedIndexes.includes(unusedIndex)) {\n          unusedIndex++;\n        } // use the index value\n\n\n        panelProps[invalidIndexes.shift()].index = unusedIndex; // try another index on the next round\n\n        unusedIndex++;\n      } // now that we know the indexes we can link to existing data; if it happens to exist, of course\n\n\n      var checkedCount = 0;\n      var firstVisibleIndex = null;\n      var lastVisibleIndex = null;\n      var nextPanels = panelProps.map(function (props, index) {\n        var panel = panels.find(function (panel) {\n          return panel.index === props.index;\n        }) || {\n          checked: checked,\n          disabled: disabled,\n          visible: visible\n        };\n        var checked = (props.checked != null ? props.checked : !!panel.checked) && (allowMultiChecked || checkedCount === 0);\n        var disabled = props.disabled != null ? props.disabled : !!panel.disabled;\n        var visible = props.visible != null ? props.visible : panel.visible === false ? false : true;\n\n        if (visible) {\n          lastVisibleIndex = index;\n          if (firstVisibleIndex == null) firstVisibleIndex = lastVisibleIndex;\n        }\n\n        if (checked && visible) checkedCount++;\n        return {\n          checked: checked,\n          disabled: disabled,\n          index: props.index,\n          visible: visible\n        };\n      });\n\n      if (firstVisibleIndex != null) {\n        // one panel must always be checked in single mode\n        if (checkedCount === 0 && props.mode !== 'multiple' && props.mode !== 'toggle') {\n          nextPanels[firstVisibleIndex].checked = true;\n        } // it is now safe to use the actual indexes instead of references\n\n\n        firstVisibleIndex = nextPanels[firstVisibleIndex].index;\n        lastVisibleIndex = nextPanels[lastVisibleIndex].index;\n      } // keep in local state: We can do this in this way because these values are derived from main panels state.\n      //                      Also, this state is updated each time props change, thus we maintain \"pureness\".\n\n\n      this.firstVisibleIndex = firstVisibleIndex;\n      this.lastVisibleIndex = lastVisibleIndex; // determine who will own the state\n\n      var stateful = !props.onChange || !props.onPanels || !Array.isArray(props.panels);\n\n      if (stateful) {\n        // it is mine, my own, My Preciouss...\n        if (!prevState.stateful || (0, _state.isShallowlyDifferentArray)(prevState.panels, nextPanels)) {\n          if (props.onPanels) props.onPanels(nextPanels);\n          return {\n            panels: nextPanels,\n            stateful: stateful\n          };\n        }\n      } else {\n        // provide updated state to whomever will own it\n        if ((0, _state.isShallowlyDifferentArray)(panels, nextPanels)) {\n          props.onPanels(nextPanels);\n        } // clear local state\n\n\n        if (prevState.stateful) {\n          return {\n            panels: null,\n            stateful: stateful\n          };\n        }\n      }\n\n      return prevState;\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(index) {\n      var mode = this.props.mode;\n\n      if (!this.state.stateful) {\n        this.props.onChange({\n          index: index,\n          mode: mode\n        });\n        return;\n      } // we can mutate this state as we please because we own this state\n\n\n      var panel = this.state.panels.find(function (panel) {\n        return panel.index === index;\n      });\n\n      if (panel == null) {\n        throw new Error('Unexpected invalid panel index: ' + index);\n      }\n\n      var didMutate = false;\n\n      switch (mode) {\n        case 'toggle':\n          // only one can be active, but also none can be active (radio, but allow unselect)\n          this.state.panels.forEach(function (togglePanel) {\n            if (togglePanel !== panel && togglePanel.checked) {\n              togglePanel.checked = false;\n            }\n          });\n          panel.checked = !panel.checked;\n          didMutate = true;\n          break;\n\n        case 'multiple':\n          // no state restrictions/relations (checkbox)\n          panel.checked = !panel.checked;\n          didMutate = true;\n          break;\n\n        default:\n          // only one panel must stay active (radio)\n          this.state.panels.forEach(function (togglePanel) {\n            if (togglePanel !== panel && togglePanel.checked) {\n              togglePanel.checked = false;\n              didMutate = true;\n            }\n          });\n\n          if (!panel.checked) {\n            panel.checked = true;\n            didMutate = true;\n          }\n\n      }\n\n      if (didMutate) {\n        this.setState({\n          panels: this.state.panels.slice(0)\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // use destructuring to pick out props we don't need to pass to the rendered component\n      var _props = this.props,\n          animateContent = _props.animateContent,\n          children = _props.children,\n          Component = _props.component,\n          bemModifiers = _props.bemModifiers,\n          bemSeparator = _props.bemSeparator,\n          blockElements = _props.blockElements,\n          component = _props.component,\n          initialPanels = _props.initialPanels,\n          mode = _props.mode,\n          name = _props.name,\n          onChange = _props.onChange,\n          onPanels = _props.onPanels,\n          panelsProp = _props.panels,\n          props = _objectWithoutProperties(_props, ['animateContent', 'children', 'component', 'bemModifiers', 'bemSeparator', 'blockElements', 'component', 'initialPanels', 'mode', 'name', 'onChange', 'onPanels', 'panels']);\n\n      var panel = 0;\n      var panels = this.state.stateful ? this.state.panels : panelsProp;\n      var childPool = [children];\n      var clones = [];\n\n      while (childPool.length) {\n        _react.Children.forEach(childPool.shift(), function (child) {\n          if (child == null || !child.type) {\n            clones.push(child);\n          } else if (child.type === _react2.default.Fragment) {\n            childPool.push(child.props.children);\n          } else if (child.type.contextTypes && child.type.contextTypes.tabbordion) {\n            var clone = _react2.default.cloneElement(child, panels[panel]);\n\n            panel++;\n            clones.push(clone);\n          } else {\n            clones.push(child);\n          }\n        });\n      }\n\n      return _react2.default.createElement(Component, _extends({}, props, {\n        role: 'tablist'\n      }), _react.Children.map(clones, identity));\n    }\n  }]);\n\n  return Tabbordion;\n}(_react.PureComponent);\n\nTabbordion.childContextTypes = {\n  bem: _propTypes2.default.object,\n  tabbordion: _propTypes2.default.object\n};\nTabbordion.defaultProps = {\n  animateContent: false,\n  bemModifiers: {\n    animated: 'animated',\n    between: 'between',\n    checked: 'checked',\n    content: 'content',\n    disabled: 'disabled',\n    enabled: 'enabled',\n    first: 'first',\n    hidden: 'hidden',\n    last: 'last',\n    noContent: 'no-content',\n    unchecked: 'unchecked'\n  },\n  bemSeparator: '--',\n  blockElements: {\n    animator: 'panel__animator',\n    content: 'panel__content',\n    label: 'panel__label',\n    panel: 'panel'\n  },\n  component: 'ul',\n  mode: 'single'\n};\n\nvar tabbordionPanelProps = _propTypes2.default.arrayOf(_propTypes2.default.shape({\n  checked: _propTypes2.default.bool,\n  disabled: _propTypes2.default.bool,\n  index: _propTypes2.default.number,\n  visible: _propTypes2.default.bool\n}));\n\nTabbordion.propTypes = {\n  animateContent: _propTypes2.default.oneOf([false, 'height', 'marginTop']),\n  bemModifiers: _propTypes2.default.shape({\n    between: _propTypes2.default.string,\n    checked: _propTypes2.default.string,\n    content: _propTypes2.default.string,\n    disabled: _propTypes2.default.string,\n    enabled: _propTypes2.default.string,\n    first: _propTypes2.default.string,\n    hidden: _propTypes2.default.string,\n    last: _propTypes2.default.string,\n    noContent: _propTypes2.default.string,\n    unchecked: _propTypes2.default.string\n  }),\n  bemSeparator: _propTypes2.default.string,\n  blockElements: _propTypes2.default.shape({\n    content: _propTypes2.default.string,\n    label: _propTypes2.default.string,\n    panel: _propTypes2.default.string\n  }),\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.string]),\n  id: _propTypes2.default.string,\n  initialPanels: tabbordionPanelProps,\n  mode: _propTypes2.default.oneOf(['single', 'toggle', 'multiple']),\n  name: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  onPanels: _propTypes2.default.func,\n  panels: tabbordionPanelProps\n};\nexports.default = Tabbordion;","map":null,"metadata":{},"sourceType":"script"}