{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nvar AchievementManager =\n/*#__PURE__*/\nfunction () {\n  function AchievementManager() {\n    _classCallCheck(this, AchievementManager);\n  }\n\n  _createClass(AchievementManager, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _getAddresses, ACHIEVEMENT_MANAGER_ADDRESS, branch, achievementManagerAbi;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getAddresses = getAddresses(web3config.netid), ACHIEVEMENT_MANAGER_ADDRESS = _getAddresses.ACHIEVEMENT_MANAGER_ADDRESS;\n                branch = getBranch(web3config.netid);\n                _context.next = 4;\n                return getABI(branch, 'AchievementManager');\n\n              case 4:\n                achievementManagerAbi = _context.sent;\n                this.achievementManagerInstance = new web3.eth.Contract(achievementManagerAbi.abi, ACHIEVEMENT_MANAGER_ADDRESS);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function init() {\n        return _init.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAchievementById\",\n    value: function () {\n      var _getAchievementById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(achievementID) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.achievementManagerInstance.methods.getAchievementById) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                return _context2.abrupt(\"return\", this.achievementManagerInstance.methods.getAchievementById(achievementID).call());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getAchievementById(_x) {\n        return _getAchievementById.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllAchievements\",\n    value: function () {\n      var _getAllAchievements = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(_ref) {\n        var _this = this;\n\n        var handler, cb, achievementIDs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                handler = _ref.handler, cb = _ref.cb;\n\n                if (!(!handler || !cb)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (this.achievementManagerInstance.methods.getAllAchievementList) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                _context4.next = 7;\n                return this.achievementManagerInstance.methods.getAllAchievementList().call();\n\n              case 7:\n                achievementIDs = _context4.sent;\n                // Get achievement list by iterating IDs\n                Promise.all(achievementIDs.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(id) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return _this.getAchievementById(id).then(function (achievement) {\n                              return handler(achievement);\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }())).then(function () {\n                  return cb();\n                });\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function getAllAchievements(_x2) {\n        return _getAllAchievements.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllAchievementsByLength\",\n    value: function () {\n      var _getAllAchievementsByLength = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref3) {\n        var _this2 = this;\n\n        var handler, cb, length;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                handler = _ref3.handler, cb = _ref3.cb;\n\n                if (!(!handler || !cb)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                if (!(!this.achievementManagerInstance.methods.allAchievements || !this.achievementManagerInstance.methods.getLengthOfAchievements)) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 5:\n                _context6.next = 7;\n                return this.achievementManagerInstance.methods.getLengthOfAchievements().call();\n\n              case 7:\n                length = _context6.sent;\n                // Get achievement list by iterating list indexes\n                Promise.all(_.range(length).map(\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee5(idx) {\n                    var achievementID;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return _this2.achievementManagerInstance.methods.allAchievements(idx).call();\n\n                          case 2:\n                            achievementID = _context5.sent;\n                            _context5.next = 5;\n                            return _this2.getAchievementById(achievementID).then(function (achievement) {\n                              return handler(achievement);\n                            });\n\n                          case 5:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, this);\n                  }));\n\n                  return function (_x5) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }())).then(function () {\n                  return cb();\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function getAllAchievementsByLength(_x4) {\n        return _getAllAchievementsByLength.apply(this, arguments);\n      };\n    }()\n    /**\n     * \n     * @param {uint256[]} topics \n     * @param {address[]} issuers \n     * @param {bytes32} title \n     * @param {bytes32} explanation \n     * @param {uint256} reward \n     * @param {string} uri \n     */\n\n  }, {\n    key: \"createAchievement\",\n    value: function createAchievement(topics, issuers, title, explanation, reward, uri) {\n      // Validate ABI\n      if (!this.achievementManagerInstance.methods.createAchievement) return; // Return transaction param\n\n      return this.achievementManagerInstance.methods.createAchievement(topics, issuers, title, explanation, reward, uri).send.request();\n    }\n  }]);\n\n  return AchievementManager;\n}();\n\nexport { AchievementManager };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/AchievementManager.contract.js"],"names":["web3","web3config","getAddresses","getBranch","getABI","_","require","AchievementManager","netid","ACHIEVEMENT_MANAGER_ADDRESS","branch","achievementManagerAbi","achievementManagerInstance","eth","Contract","abi","achievementID","methods","getAchievementById","call","handler","cb","getAllAchievementList","achievementIDs","Promise","all","map","id","then","achievement","allAchievements","getLengthOfAchievements","length","range","idx","topics","issuers","title","explanation","reward","uri","createAchievement","send","request"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;IAEMC,kB;;;;;;;;;;;;;;;;;;;gCAEsCL,YAAY,CAACD,UAAU,CAACO,KAAZ,C,EAA5CC,2B,iBAAAA,2B;AACFC,gBAAAA,M,GAASP,SAAS,CAACF,UAAU,CAACO,KAAZ,C;;uBAEYJ,MAAM,CAACM,MAAD,EAAS,oBAAT,C;;;AAApCC,gBAAAA,qB;AACN,qBAAKC,0BAAL,GAAkC,IAAIZ,IAAI,CAACa,GAAL,CAASC,QAAb,CAAsBH,qBAAqB,CAACI,GAA5C,EAAiDN,2BAAjD,CAAlC;;;;;;;;;;;;;;;;;;;iDAGuBO,a;;;;;oBAEjB,KAAKJ,0BAAL,CAAgCK,OAAhC,CAAwCC,kB;;;;;;;;kDAGvC,KAAKN,0BAAL,CAAgCK,OAAhC,CAAwCC,kBAAxC,CAA2DF,aAA3D,EAA0EG,IAA1E,E;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGiBC,gBAAAA,O,QAAAA,O,EAASC,E,QAAAA,E;;sBAC7B,CAAED,OAAF,IAAa,CAAEC,E;;;;;;;;oBAGb,KAAKT,0BAAL,CAAgCK,OAAhC,CAAwCK,qB;;;;;;;;;uBAGnB,KAAKV,0BAAL,CAAgCK,OAAhC,CAAwCK,qBAAxC,GAAgEH,IAAhE,E;;;AAAvBI,gBAAAA,c;AAEJ;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,cAAc,CAACG,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAmB,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACvB,KAAI,CAACT,kBAAL,CAAwBS,EAAxB,EAA4BC,IAA5B,CAAiC,UAAAC,WAAW;AAAA,qCAAIT,OAAO,CAACS,WAAD,CAAX;AAAA,6BAA5C,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,EAEID,IAFJ,CAES;AAAA,yBAAMP,EAAE,EAAR;AAAA,iBAFT;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKgCD,gBAAAA,O,SAAAA,O,EAASC,E,SAAAA,E;;sBACrC,CAAED,OAAF,IAAa,CAAEC,E;;;;;;;;sBAGf,CAAE,KAAKT,0BAAL,CAAgCK,OAAhC,CAAwCa,eAA1C,IACC,CAAE,KAAKlB,0BAAL,CAAgCK,OAAhC,CAAwCc,uB;;;;;;;;;uBAG5B,KAAKnB,0BAAL,CAAgCK,OAAhC,CAAwCc,uBAAxC,GAAkEZ,IAAlE,E;;;AAAfa,gBAAAA,M;AAEJ;AACAR,gBAAAA,OAAO,CAACC,GAAR,CAAYpB,CAAC,CAAC4B,KAAF,CAAQD,MAAR,EAAgBN,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAoB,kBAAOQ,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACJ,MAAI,CAACtB,0BAAL,CAAgCK,OAAhC,CAAwCa,eAAxC,CAAwDI,GAAxD,EAA6Df,IAA7D,EADI;;AAAA;AAC1BH,4BAAAA,aAD0B;AAAA;AAAA,mCAExB,MAAI,CAACE,kBAAL,CAAwBF,aAAxB,EAAuCY,IAAvC,CAA4C,UAAAC,WAAW;AAAA,qCAAIT,OAAO,CAACS,WAAD,CAAX;AAAA,6BAAvD,CAFwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,EAGID,IAHJ,CAGS;AAAA,yBAAMP,EAAE,EAAR;AAAA,iBAHT;;;;;;;;;;;;;;AAMF;;;;;;;;;;;;sCASkBc,M,EAAQC,O,EAASC,K,EAAOC,W,EAAaC,M,EAAQC,G,EAAK;AAClE;AACA,UAAI,CAAE,KAAK5B,0BAAL,CAAgCK,OAAhC,CAAwCwB,iBAA9C,EAAiE,OAFC,CAIlE;;AACA,aAAO,KAAK7B,0BAAL,CAAgCK,OAAhC,CAAwCwB,iBAAxC,CAA0DN,MAA1D,EAAkEC,OAAlE,EAA2EC,KAA3E,EAAkFC,WAAlF,EAA+FC,MAA/F,EAAuGC,GAAvG,EAA4GE,IAA5G,CAAiHC,OAAjH,EAAP;AACD;;;;;;AAGH,SAAQpC,kBAAR","sourcesContent":["import web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nclass AchievementManager {\n  async init() {\n    const { ACHIEVEMENT_MANAGER_ADDRESS } = getAddresses(web3config.netid);\n    const branch = getBranch(web3config.netid);\n\n    const achievementManagerAbi = await getABI(branch, 'AchievementManager');\n    this.achievementManagerInstance = new web3.eth.Contract(achievementManagerAbi.abi, ACHIEVEMENT_MANAGER_ADDRESS);\n  }\n\n  async getAchievementById(achievementID) {\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.getAchievementById) return;\n\n    // Call\n    return this.achievementManagerInstance.methods.getAchievementById(achievementID).call();\n  }\n\n  async getAllAchievements({handler, cb}) {\n    if (! handler || ! cb) return;\n\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.getAllAchievementList) return;\n\n    // Get achievement IDs\n    var achievementIDs = await this.achievementManagerInstance.methods.getAllAchievementList().call();\n    \n    // Get achievement list by iterating IDs\n    Promise.all(achievementIDs.map(async (id) => {\n      await this.getAchievementById(id).then(achievement => handler(achievement));\n    })).then(() => cb());\n  }\n\n  async getAllAchievementsByLength({handler, cb}) {\n    if (! handler || ! cb) return;\n\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.allAchievements\n      || ! this.achievementManagerInstance.methods.getLengthOfAchievements) return;\n\n    // Get achievement list length\n    let length = await this.achievementManagerInstance.methods.getLengthOfAchievements().call();\n\n    // Get achievement list by iterating list indexes\n    Promise.all(_.range(length).map(async (idx) => {\n      let achievementID = await this.achievementManagerInstance.methods.allAchievements(idx).call();\n      await this.getAchievementById(achievementID).then(achievement => handler(achievement));\n    })).then(() => cb());\n  }\n\n  /**\n   * \n   * @param {uint256[]} topics \n   * @param {address[]} issuers \n   * @param {bytes32} title \n   * @param {bytes32} explanation \n   * @param {uint256} reward \n   * @param {string} uri \n   */\n  createAchievement(topics, issuers, title, explanation, reward, uri) {\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.createAchievement) return;\n\n    // Return transaction param\n    return this.achievementManagerInstance.methods.createAchievement(topics, issuers, title, explanation, reward, uri).send.request();\n  }\n}\n\nexport {AchievementManager}"]},"metadata":{},"sourceType":"module"}