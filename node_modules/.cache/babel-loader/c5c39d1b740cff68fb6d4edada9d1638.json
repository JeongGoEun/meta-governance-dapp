{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport web3, { signTx, getTxDataWoNonce } from '../web3';\nimport web3config from '../web3-config.json';\nimport { getBranch, getABI } from './helpers';\n\nvar ethUtil = require('ethereumjs-util');\n\nvar Identity =\n/*#__PURE__*/\nfunction () {\n  function Identity() {\n    _classCallCheck(this, Identity);\n  }\n\n  _createClass(Identity, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var branch;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                branch = getBranch(web3config.netid);\n                _context.next = 3;\n                return getABI(branch, 'Identity');\n\n              case 3:\n                this.identityAbi = _context.sent;\n                this.identityInstance = new web3.eth.Contract(this.identityAbi.abi, web3config.addr);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function init() {\n        return _init.apply(this, arguments);\n      };\n    }()\n    /**\n     * @param {addr} string\n     * @param {topic} uint256\n     * @param {scheme} uint256 // 1: ECDSA_SCHEME, 2: RSA_SCHEME\n     * @param {data} bytes\n     * @param {signature} bytes\n     * @param {uri} string\n     */\n\n  }, {\n    key: \"addClaim\",\n    value: function addClaim(_ref) {\n      var addr = _ref.addr,\n          topic = _ref.topic,\n          scheme = _ref.scheme,\n          uri = _ref.uri;\n      var data = 'data';\n      var bData = ethUtil.hashPersonalMessage(new Buffer(data, 'hex'));\n      var claim = this.identityInstance.methods.claimToSign(web3config.addr, topic, bData).encodeABI();\n      var signature = signTx(getTxDataWoNonce(addr, claim));\n      return this.identityInstance.methods.addClaim(topic, scheme, web3config.addr, signature, bData, uri).encodeABI();\n    }\n  }]);\n\n  return Identity;\n}();\n\nexport { Identity };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/Identity.contract.js"],"names":["web3","signTx","getTxDataWoNonce","web3config","getBranch","getABI","ethUtil","require","Identity","branch","netid","identityAbi","identityInstance","eth","Contract","abi","addr","topic","scheme","uri","data","bData","hashPersonalMessage","Buffer","claim","methods","claimToSign","encodeABI","signature","addClaim"],"mappings":";;;;AAAA,OAAOA,IAAP,IAAeC,MAAf,EAAuBC,gBAAvB,QAA+C,SAA/C;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;IAEMC,Q;;;;;;;;;;;;;;;;;;AAEIC,gBAAAA,M,GAASL,SAAS,CAACD,UAAU,CAACO,KAAZ,C;;uBAECL,MAAM,CAACI,MAAD,EAAS,UAAT,C;;;AAA/B,qBAAKE,W;AACL,qBAAKC,gBAAL,GAAwB,IAAIZ,IAAI,CAACa,GAAL,CAASC,QAAb,CAAsB,KAAKH,WAAL,CAAiBI,GAAvC,EAA4CZ,UAAU,CAACa,IAAvD,CAAxB;;;;;;;;;;;;;;AAGF;;;;;;;;;;;mCAQuC;AAAA,UAA5BA,IAA4B,QAA5BA,IAA4B;AAAA,UAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,UAAfC,MAAe,QAAfA,MAAe;AAAA,UAAPC,GAAO,QAAPA,GAAO;AACrC,UAAMC,IAAI,GAAG,MAAb;AACA,UAAMC,KAAK,GAAGf,OAAO,CAACgB,mBAAR,CAA4B,IAAIC,MAAJ,CAAWH,IAAX,EAAiB,KAAjB,CAA5B,CAAd;AAEA,UAAMI,KAAK,GAAG,KAAKZ,gBAAL,CAAsBa,OAAtB,CAA8BC,WAA9B,CAA0CvB,UAAU,CAACa,IAArD,EAA2DC,KAA3D,EAAkEI,KAAlE,EAAyEM,SAAzE,EAAd;AACA,UAAMC,SAAS,GAAG3B,MAAM,CAACC,gBAAgB,CAACc,IAAD,EAAOQ,KAAP,CAAjB,CAAxB;AACA,aAAO,KAAKZ,gBAAL,CAAsBa,OAAtB,CAA8BI,QAA9B,CAAuCZ,KAAvC,EAA8CC,MAA9C,EAAsDf,UAAU,CAACa,IAAjE,EAAuEY,SAAvE,EAAkFP,KAAlF,EAAyFF,GAAzF,EAA8FQ,SAA9F,EAAP;AACD;;;;;;AAGH,SAAQnB,QAAR","sourcesContent":["import web3, { signTx, getTxDataWoNonce } from '../web3';\nimport web3config from '../web3-config.json';\nimport { getBranch, getABI } from './helpers';\n\nconst ethUtil = require('ethereumjs-util');\n\nclass Identity {\n  async init() {\n    const branch = getBranch(web3config.netid);\n\n    this.identityAbi = await getABI(branch, 'Identity');\n    this.identityInstance = new web3.eth.Contract(this.identityAbi.abi, web3config.addr);\n  }\n\n  /**\n   * @param {addr} string\n   * @param {topic} uint256\n   * @param {scheme} uint256 // 1: ECDSA_SCHEME, 2: RSA_SCHEME\n   * @param {data} bytes\n   * @param {signature} bytes\n   * @param {uri} string\n   */\n  addClaim({ addr, topic, scheme, uri }) {\n    const data = 'data';\n    const bData = ethUtil.hashPersonalMessage(new Buffer(data, 'hex'));\n    \n    const claim = this.identityInstance.methods.claimToSign(web3config.addr, topic, bData).encodeABI();\n    const signature = signTx(getTxDataWoNonce(addr, claim));\n    return this.identityInstance.methods.addClaim(topic, scheme, web3config.addr, signature, bData, uri).encodeABI();\n  }\n}\n\nexport {Identity}"]},"metadata":{},"sourceType":"module"}