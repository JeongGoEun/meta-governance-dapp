{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nvar AttestationAgencyRegistry =\n/*#__PURE__*/\nfunction () {\n  function AttestationAgencyRegistry() {\n    _classCallCheck(this, AttestationAgencyRegistry);\n  }\n\n  _createClass(AttestationAgencyRegistry, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _getAddresses, ATTESTATION_AGENCY_REGISTRY_ADDRESS, branch, aaRegistryAbi;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getAddresses = getAddresses(web3config.netid), ATTESTATION_AGENCY_REGISTRY_ADDRESS = _getAddresses.ATTESTATION_AGENCY_REGISTRY_ADDRESS;\n                branch = getBranch(web3config.netid);\n                _context.next = 4;\n                return getABI(branch, 'AttestationAgencyRegistry');\n\n              case 4:\n                aaRegistryAbi = _context.sent;\n                this.aaRegistryInstance = new web3.eth.Contract(aaRegistryAbi.abi, ATTESTATION_AGENCY_REGISTRY_ADDRESS);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function init() {\n        return _init.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"isRegistered\",\n    value: function () {\n      var _isRegistered = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(addr) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.aaRegistryInstance.methods.isRegistered) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                return _context2.abrupt(\"return\", this.aaRegistryInstance.methods.isRegistered(addr).call());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function isRegistered(_x) {\n        return _isRegistered.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAttestationAgencyNum\",\n    value: function () {\n      var _getAttestationAgencyNum = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.aaRegistryInstance.methods.attestationAgencyNum) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                return _context3.abrupt(\"return\", this.aaRegistryInstance.methods.attestationAgencyNum().call());\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getAttestationAgencyNum() {\n        return _getAttestationAgencyNum.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAttestationAgencySingle\",\n    value: function () {\n      var _getAttestationAgencySingle = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(idx) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.aaRegistryInstance.methods.getAttestationAgencySingle) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                return _context4.abrupt(\"return\", this.aaRegistryInstance.methods.getAttestationAgencySingle(idx).call());\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function getAttestationAgencySingle(_x2) {\n        return _getAttestationAgencySingle.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllAttestationAgencies\",\n    value: function () {\n      var _getAllAttestationAgencies = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref) {\n        var _this = this;\n\n        var handler, cb, total;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                handler = _ref.handler, cb = _ref.cb;\n\n                if (!(!handler || !cb)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                _context6.next = 5;\n                return this.getAttestationAgencyNum();\n\n              case 5:\n                total = _context6.sent;\n                Promise.all(_.range(total).map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee5(idx) {\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return _this.getAttestationAgencySingle(idx).then(function (ret) {\n                              return handler(ret);\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, this);\n                  }));\n\n                  return function (_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }())).then(function () {\n                  return cb();\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function getAllAttestationAgencies(_x3) {\n        return _getAllAttestationAgencies.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return AttestationAgencyRegistry;\n}();\n\nexport { AttestationAgencyRegistry };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/AttestationAgencyRegistry.contract.js"],"names":["web3","web3config","getAddresses","getBranch","getABI","_","require","AttestationAgencyRegistry","netid","ATTESTATION_AGENCY_REGISTRY_ADDRESS","branch","aaRegistryAbi","aaRegistryInstance","eth","Contract","abi","addr","methods","isRegistered","call","attestationAgencyNum","idx","getAttestationAgencySingle","handler","cb","getAttestationAgencyNum","total","Promise","all","range","map","then","ret"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;IAEMC,yB;;;;;;;;;;;;;;;;;;;gCAG8CL,YAAY,CAACD,UAAU,CAACO,KAAZ,C,EAApDC,mC,iBAAAA,mC;AACFC,gBAAAA,M,GAASP,SAAS,CAACF,UAAU,CAACO,KAAZ,C;;uBAEIJ,MAAM,CAACM,MAAD,EAAS,2BAAT,C;;;AAA5BC,gBAAAA,a;AACN,qBAAKC,kBAAL,GAA0B,IAAIZ,IAAI,CAACa,GAAL,CAASC,QAAb,CAAsBH,aAAa,CAACI,GAApC,EAAyCN,mCAAzC,CAA1B;;;;;;;;;;;;;;;;;;;iDAGiBO,I;;;;;oBAEX,KAAKJ,kBAAL,CAAwBK,OAAxB,CAAgCC,Y;;;;;;;;kDAG/B,KAAKN,kBAAL,CAAwBK,OAAxB,CAAgCC,YAAhC,CAA6CF,IAA7C,EAAmDG,IAAnD,E;;;;;;;;;;;;;;;;;;;;;;;;oBAKD,KAAKP,kBAAL,CAAwBK,OAAxB,CAAgCG,oB;;;;;;;;kDAG/B,KAAKR,kBAAL,CAAwBK,OAAxB,CAAgCG,oBAAhC,GAAuDD,IAAvD,E;;;;;;;;;;;;;;;;;;;iDAGwBE,G;;;;;oBAEzB,KAAKT,kBAAL,CAAwBK,OAAxB,CAAgCK,0B;;;;;;;;kDAG/B,KAAKV,kBAAL,CAAwBK,OAAxB,CAAgCK,0BAAhC,CAA2DD,GAA3D,EAAgEF,IAAhE,E;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGwBI,gBAAAA,O,QAAAA,O,EAASC,E,QAAAA,E;;sBACpC,CAAED,OAAF,IAAa,CAAEC,E;;;;;;;;;uBAGD,KAAKC,uBAAL,E;;;AAAdC,gBAAAA,K;AACJC,gBAAAA,OAAO,CAACC,GAAR,CAAYvB,CAAC,CAACwB,KAAF,CAAQH,KAAR,EAAeI,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAmB,kBAAOT,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEvB,KAAI,CAACC,0BAAL,CAAgCD,GAAhC,EAAqCU,IAArC,CAA0C,UAAAC,GAAG;AAAA,qCAAIT,OAAO,CAACS,GAAD,CAAX;AAAA,6BAA7C,CAFuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,EAGID,IAHJ,CAGS;AAAA,yBAAMP,EAAE,EAAR;AAAA,iBAHT;;;;;;;;;;;;;;;;;;;AAOJ,SAAQjB,yBAAR","sourcesContent":["import web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nclass AttestationAgencyRegistry {\n\n  async init() {\n    const { ATTESTATION_AGENCY_REGISTRY_ADDRESS } = getAddresses(web3config.netid);\n    const branch = getBranch(web3config.netid);\n\n    const aaRegistryAbi = await getABI(branch, 'AttestationAgencyRegistry');\n    this.aaRegistryInstance = new web3.eth.Contract(aaRegistryAbi.abi, ATTESTATION_AGENCY_REGISTRY_ADDRESS);\n  }\n\n  async isRegistered(addr) {\n    // Validate ABI\n    if (! this.aaRegistryInstance.methods.isRegistered) return;\n\n    // Call\n    return this.aaRegistryInstance.methods.isRegistered(addr).call();\n  }\n\n  async getAttestationAgencyNum() {\n    // Validate ABI\n    if (! this.aaRegistryInstance.methods.attestationAgencyNum) return;\n\n    // Call\n    return this.aaRegistryInstance.methods.attestationAgencyNum().call();\n  }\n\n  async getAttestationAgencySingle(idx) {\n    // Validate ABI\n    if (! this.aaRegistryInstance.methods.getAttestationAgencySingle) return;\n\n    // Call\n    return this.aaRegistryInstance.methods.getAttestationAgencySingle(idx).call();\n  }\n\n  async getAllAttestationAgencies({handler, cb}) {\n    if (! handler || ! cb) return;\n\n    // Search AAs with the range from zero to total\n    let total = await this.getAttestationAgencyNum();\n    Promise.all(_.range(total).map(async (idx) => {\n      // Execute handler from getAttestationAgencySingle() when an AA was registered\n      await this.getAttestationAgencySingle(idx).then(ret => handler(ret));\n    })).then(() => cb());\n  }\n}\n\nexport {AttestationAgencyRegistry}"]},"metadata":{},"sourceType":"module"}