{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/meta-dapp-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/meta-dapp-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { constants } from './constants';\nvar web3 = null;\n\nvar getWeb3Instance = function getWeb3Instance() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load',\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var errorMsg, netIdName, netId, defaultAccount, accounts, network;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 15;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              console.log('Injected web3 detected.');\n              _context.prev = 3;\n              _context.next = 6;\n              return window.ethereum.enable();\n\n            case 6:\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              console.error('User denied account access');\n              reject({\n                message: 'User denied account access'\n              });\n              return _context.abrupt(\"return\");\n\n            case 13:\n              _context.next = 16;\n              break;\n\n            case 15:\n              if (typeof window.web3 !== 'undefined') {\n                web3 = new Web3(window.web3.currentProvider);\n                console.log('Injected web3 detected.');\n              }\n\n            case 16:\n              errorMsg = null;\n              defaultAccount = null;\n\n              if (!web3) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 21;\n              return web3.eth.net.getId();\n\n            case 21:\n              netId = _context.sent;\n              console.log('netId', netId);\n\n              if (!(netId in constants.NETWORKS)) {\n                netIdName = 'ERROR';\n                errorMsg = 'This is an unknown network.';\n                console.log('This is an unknown network.');\n              } else {\n                netIdName = constants.NETWORKS[netId].NAME;\n                console.log(\"This is \".concat(netIdName));\n              }\n\n              _context.next = 26;\n              return web3.eth.getAccounts();\n\n            case 26:\n              accounts = _context.sent;\n              defaultAccount = accounts[0] || null;\n              _context.next = 36;\n              break;\n\n            case 30:\n              // Fallback to local if no web3 injection.\n              console.log('No web3 instance injected, using Local web3.');\n              console.error('Metamask not found');\n              netId = constants.NETID_TESTNET;\n              network = constants.NETWORKS[netId];\n              web3 = new Web3(new Web3.providers.HttpProvider(network.RPC));\n              netIdName = network.NAME;\n\n            case 36:\n              if (!(errorMsg !== null)) {\n                _context.next = 39;\n                break;\n              }\n\n              reject({\n                message: errorMsg\n              });\n              return _context.abrupt(\"return\");\n\n            case 39:\n              resolve({\n                web3Instance: web3,\n                netIdName: netIdName,\n                netId: netId,\n                defaultAccount: defaultAccount\n              });\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 8]]);\n    })));\n  });\n};\n\nexport default getWeb3Instance;","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/meta-dapp-voting/src/ethereum/web3.js"],"names":["Web3","constants","web3","getWeb3Instance","Promise","resolve","reject","window","addEventListener","ethereum","console","log","enable","error","message","currentProvider","errorMsg","defaultAccount","eth","net","getId","netId","NETWORKS","netIdName","NAME","getAccounts","accounts","NETID_TESTNET","network","providers","HttpProvider","RPC","web3Instance"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport {constants} from './constants'\n\nlet web3 = null;\n\nlet getWeb3Instance = () => {\n    return new Promise((resolve, reject) => {\n      // Wait for loading completion to avoid race conditions with web3 injection timing.\n      window.addEventListener('load', async () => {\n  \n        // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n        if (window.ethereum) {\n          web3 = new Web3(window.ethereum)\n          console.log('Injected web3 detected.')\n          try {\n            await window.ethereum.enable()\n          } catch (e) {\n            console.error('User denied account access')\n            reject({ message: 'User denied account access' })\n            return\n          }\n        } else if (typeof window.web3 !== 'undefined') {\n          web3 = new Web3(window.web3.currentProvider)\n          console.log('Injected web3 detected.')\n        }\n  \n        let errorMsg = null\n        let netIdName\n        let netId\n        let defaultAccount = null\n  \n        if (web3) {\n          netId = await web3.eth.net.getId()\n          console.log('netId', netId)\n          if (!(netId in constants.NETWORKS)) {\n            netIdName = 'ERROR'\n            errorMsg = 'This is an unknown network.'\n            console.log('This is an unknown network.')\n          } else {\n            netIdName = constants.NETWORKS[netId].NAME\n            console.log(`This is ${netIdName}`)\n          }\n          const accounts = await web3.eth.getAccounts()\n  \n          defaultAccount = accounts[0] || null\n        } else {\n          // Fallback to local if no web3 injection.\n          console.log('No web3 instance injected, using Local web3.')\n          console.error('Metamask not found')\n  \n          netId = constants.NETID_TESTNET;\n  \n          const network = constants.NETWORKS[netId]\n  \n          web3 = new Web3(new Web3.providers.HttpProvider(network.RPC))\n          netIdName = network.NAME\n        }\n    \n        if (errorMsg !== null) {\n          reject({ message: errorMsg })\n          return\n        }\n  \n        resolve({\n          web3Instance: web3,\n          netIdName,\n          netId,\n          defaultAccount\n        })\n      })\n    })\n  }\n  \n  export default getWeb3Instance\n"]},"metadata":{},"sourceType":"module"}