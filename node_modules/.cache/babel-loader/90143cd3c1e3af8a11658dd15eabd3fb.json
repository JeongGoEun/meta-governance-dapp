{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.getArray = getArray;\nexports.getChecked = getChecked;\nexports.getDisabled = getDisabled;\nexports.getIndex = getIndex;\nexports.isShallowlyDifferent = isShallowlyDifferent;\nexports.isShallowlyDifferentArray = isShallowlyDifferentArray;\nvar EMPTY_ARRAY = [];\n/** Micro optimization: always use the same reference to empty arrays */\n\nfunction getArray(array) {\n  return Array.isArray(array) && array.length > 0 ? array : EMPTY_ARRAY;\n}\n\nfunction getChecked(_ref) {\n  var checked = _ref.checked;\n  return checked;\n}\n\nfunction getDisabled(_ref2) {\n  var disabled = _ref2.disabled;\n  return disabled;\n}\n\nfunction getIndex(_ref3) {\n  var index = _ref3.index;\n  return index;\n}\n\nfunction isShallowlyDifferent(obj1, obj2) {\n  if (obj1 === obj2) {\n    return false;\n  } // handle undefined and null as equals\n\n\n  if (obj1 == null || obj2 == null) {\n    return obj1 != null || obj2 != null;\n  } // non-objects must be an exact match\n\n\n  if ((typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) !== 'object' || (typeof obj2 === 'undefined' ? 'undefined' : _typeof(obj2)) !== 'object') {\n    return true;\n  } // we now know both are objects so we can do object comparisons\n\n\n  var keys1 = Object.keys(obj1 || {}).sort();\n  var keys2 = Object.keys(obj2 || {}).sort(); // must have same amount of keys\n\n  if (keys1.length !== keys2.length) {\n    return true;\n  }\n\n  return keys1.some(function (key, index) {\n    return key !== keys2[index] || (Array.isArray(obj1[key]) ? isShallowlyDifferentArray(obj1[key], obj2[key]) : obj1[key] !== obj2[key]);\n  });\n}\n\nfunction isShallowlyDifferentArray() {\n  var arr1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var arr2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (arr1.length !== arr2.length) {\n    return true;\n  }\n\n  return arr1.some(function (item, index) {\n    return isShallowlyDifferent(item, arr2[index]);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}