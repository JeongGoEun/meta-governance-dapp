{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/meta-dapp-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/meta-dapp-voting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { constants } from './constants';\n\nvar web3 = function web3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load',\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, errorMsg, netIdName, netId, defaultAccount, accounts, network;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              web3 = null; // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n\n              if (!window.ethereum) {\n                _context.next = 16;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              console.log('Injected web3 detected.');\n              _context.prev = 4;\n              _context.next = 7;\n              return window.ethereum.enable();\n\n            case 7:\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](4);\n              console.error('User denied account access');\n              reject({\n                message: 'User denied account access'\n              });\n              return _context.abrupt(\"return\");\n\n            case 14:\n              _context.next = 17;\n              break;\n\n            case 16:\n              if (typeof window.web3 !== 'undefined') {\n                web3 = new Web3(window.web3.currentProvider);\n                console.log('Injected web3 detected.');\n              }\n\n            case 17:\n              errorMsg = null;\n              defaultAccount = null;\n\n              if (!web3) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.next = 22;\n              return web3.eth.net.getId();\n\n            case 22:\n              netId = _context.sent;\n              console.log('netId', netId);\n\n              if (!(netId in constants.NETWORKS)) {\n                netIdName = 'ERROR';\n                errorMsg = 'This is an unknown network.';\n                console.log('This is an unknown network.');\n              } else {\n                netIdName = constants.NETWORKS[netId].NAME;\n                console.log(\"This is \".concat(netIdName));\n              }\n\n              _context.next = 27;\n              return web3.eth.getAccounts();\n\n            case 27:\n              accounts = _context.sent;\n              defaultAccount = accounts[0] || null;\n              _context.next = 37;\n              break;\n\n            case 31:\n              // Fallback to local if no web3 injection.\n              console.log('No web3 instance injected, using Local web3.');\n              console.error('Metamask not found');\n              netId = constants.NETID_TESTNET;\n              network = constants.NETWORKS[netId];\n              web3 = new Web3(new Web3.providers.HttpProvider(network.RPC));\n              netIdName = network.NAME;\n\n            case 37:\n              if (!(errorMsg !== null)) {\n                _context.next = 40;\n                break;\n              }\n\n              reject({\n                message: errorMsg\n              });\n              return _context.abrupt(\"return\");\n\n            case 40:\n              resolve({\n                web3Instance: web3,\n                netIdName: netIdName,\n                netId: netId,\n                defaultAccount: defaultAccount\n              });\n\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[4, 9]]);\n    })));\n  });\n};\n\nexport default web3;","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/meta-dapp-voting/src/ethereum/web3.js"],"names":["Web3","constants","web3","Promise","resolve","reject","window","addEventListener","ethereum","console","log","enable","error","message","currentProvider","errorMsg","defaultAccount","eth","net","getId","netId","NETWORKS","netIdName","NAME","getAccounts","accounts","NETID_TESTNET","network","providers","HttpProvider","RPC","web3Instance"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AAEA,IAAIC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACb,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BL,cAAAA,IAD0B,GACnB,IADmB,EAG9B;;AAH8B,mBAI1BI,MAAM,CAACE,QAJmB;AAAA;AAAA;AAAA;;AAK5BN,cAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAP;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAN4B;AAAA;AAAA,qBAQpBJ,MAAM,CAACE,QAAP,CAAgBG,MAAhB,EARoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAU1BF,cAAAA,OAAO,CAACG,KAAR,CAAc,4BAAd;AACAP,cAAAA,MAAM,CAAC;AAAEQ,gBAAAA,OAAO,EAAE;AAAX,eAAD,CAAN;AAX0B;;AAAA;AAAA;AAAA;;AAAA;AAcvB,kBAAI,OAAOP,MAAM,CAACJ,IAAd,KAAuB,WAA3B,EAAwC;AAC7CA,gBAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASM,MAAM,CAACJ,IAAP,CAAYY,eAArB,CAAP;AACAL,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;AAjB6B;AAmB1BK,cAAAA,QAnB0B,GAmBf,IAnBe;AAsB1BC,cAAAA,cAtB0B,GAsBT,IAtBS;;AAAA,mBAwB1Bd,IAxB0B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAyBdA,IAAI,CAACe,GAAL,CAASC,GAAT,CAAaC,KAAb,EAzBc;;AAAA;AAyB5BC,cAAAA,KAzB4B;AA0B5BX,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,KAArB;;AACA,kBAAI,EAAEA,KAAK,IAAInB,SAAS,CAACoB,QAArB,CAAJ,EAAoC;AAClCC,gBAAAA,SAAS,GAAG,OAAZ;AACAP,gBAAAA,QAAQ,GAAG,6BAAX;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,eAJD,MAIO;AACLY,gBAAAA,SAAS,GAAGrB,SAAS,CAACoB,QAAV,CAAmBD,KAAnB,EAA0BG,IAAtC;AACAd,gBAAAA,OAAO,CAACC,GAAR,mBAAuBY,SAAvB;AACD;;AAlC2B;AAAA,qBAmCLpB,IAAI,CAACe,GAAL,CAASO,WAAT,EAnCK;;AAAA;AAmCtBC,cAAAA,QAnCsB;AAqC5BT,cAAAA,cAAc,GAAGS,QAAQ,CAAC,CAAD,CAAR,IAAe,IAAhC;AArC4B;AAAA;;AAAA;AAuC5B;AACAhB,cAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,cAAAA,OAAO,CAACG,KAAR,CAAc,oBAAd;AAEAQ,cAAAA,KAAK,GAAGnB,SAAS,CAACyB,aAAlB;AAEMC,cAAAA,OA7CsB,GA6CZ1B,SAAS,CAACoB,QAAV,CAAmBD,KAAnB,CA7CY;AA+C5BlB,cAAAA,IAAI,GAAG,IAAIF,IAAJ,CAAS,IAAIA,IAAI,CAAC4B,SAAL,CAAeC,YAAnB,CAAgCF,OAAO,CAACG,GAAxC,CAAT,CAAP;AACAR,cAAAA,SAAS,GAAGK,OAAO,CAACJ,IAApB;;AAhD4B;AAAA,oBAmD1BR,QAAQ,KAAK,IAnDa;AAAA;AAAA;AAAA;;AAoD5BV,cAAAA,MAAM,CAAC;AAAEQ,gBAAAA,OAAO,EAAEE;AAAX,eAAD,CAAN;AApD4B;;AAAA;AAwD9BX,cAAAA,OAAO,CAAC;AACN2B,gBAAAA,YAAY,EAAE7B,IADR;AAENoB,gBAAAA,SAAS,EAATA,SAFM;AAGNF,gBAAAA,KAAK,EAALA,KAHM;AAINJ,gBAAAA,cAAc,EAAdA;AAJM,eAAD,CAAP;;AAxD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA+DD,GAjEM,CAAP;AAkED,CAnEH;;AAqEE,eAAed,IAAf","sourcesContent":["import Web3 from 'web3'\nimport {constants} from './constants'\n\nlet web3 = () => {\n    return new Promise((resolve, reject) => {\n      // Wait for loading completion to avoid race conditions with web3 injection timing.\n      window.addEventListener('load', async () => {\n        let web3 = null\n  \n        // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n        if (window.ethereum) {\n          web3 = new Web3(window.ethereum)\n          console.log('Injected web3 detected.')\n          try {\n            await window.ethereum.enable()\n          } catch (e) {\n            console.error('User denied account access')\n            reject({ message: 'User denied account access' })\n            return\n          }\n        } else if (typeof window.web3 !== 'undefined') {\n          web3 = new Web3(window.web3.currentProvider)\n          console.log('Injected web3 detected.')\n        }\n  \n        let errorMsg = null\n        let netIdName\n        let netId\n        let defaultAccount = null\n  \n        if (web3) {\n          netId = await web3.eth.net.getId()\n          console.log('netId', netId)\n          if (!(netId in constants.NETWORKS)) {\n            netIdName = 'ERROR'\n            errorMsg = 'This is an unknown network.'\n            console.log('This is an unknown network.')\n          } else {\n            netIdName = constants.NETWORKS[netId].NAME\n            console.log(`This is ${netIdName}`)\n          }\n          const accounts = await web3.eth.getAccounts()\n  \n          defaultAccount = accounts[0] || null\n        } else {\n          // Fallback to local if no web3 injection.\n          console.log('No web3 instance injected, using Local web3.')\n          console.error('Metamask not found')\n  \n          netId = constants.NETID_TESTNET;\n  \n          const network = constants.NETWORKS[netId]\n  \n          web3 = new Web3(new Web3.providers.HttpProvider(network.RPC))\n          netIdName = network.NAME\n        }\n    \n        if (errorMsg !== null) {\n          reject({ message: errorMsg })\n          return\n        }\n  \n        resolve({\n          web3Instance: web3,\n          netIdName,\n          netId,\n          defaultAccount\n        })\n      })\n    })\n  }\n  \n  export default web3\n"]},"metadata":{},"sourceType":"module"}