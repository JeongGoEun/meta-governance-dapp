{"ast":null,"code":"import { constants } from '../constants';\nimport { messages } from '../messages';\nimport swal from 'sweetalert2';\n\nfunction addressesURL(branch) {\n  var URL = \"https://raw.githubusercontent.com/\".concat(constants.organization, \"/\").concat(constants.repoName, \"/\").concat(branch, \"/\").concat(constants.addressesSourceFile);\n  return URL;\n}\n\nfunction ABIURL(branch, contract) {\n  var URL = \"https://raw.githubusercontent.com/\".concat(constants.organization, \"/\").concat(constants.repoName, \"/\").concat(branch, \"/abis/\").concat(constants.ABIsSources[contract]);\n  return URL;\n}\n\nfunction getABI(branch, contract) {\n  var addr = ABIURL(branch, contract);\n  return fetch(addr).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction wrongRepoAlert(addr) {\n  swal('Error!', messages.wrongRepo(addr), 'error');\n}\n\nfunction getBranch(netId) {\n  switch (netId) {\n    case constants.NETID_TESTNET:\n      return 'testnet';\n\n    default:\n      return 'testnet';\n  }\n}\n\nexport { addressesURL, ABIURL, getABI, wrongRepoAlert, getBranch };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/helpers.js"],"names":["constants","messages","swal","addressesURL","branch","URL","organization","repoName","addressesSourceFile","ABIURL","contract","ABIsSources","getABI","addr","fetch","then","response","json","wrongRepoAlert","wrongRepo","getBranch","netId","NETID_TESTNET"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAMC,GAAG,+CAAwCL,SAAS,CAACM,YAAlD,cAAkEN,SAAS,CAACO,QAA5E,cAAwFH,MAAxF,cACPJ,SAAS,CAACQ,mBADH,CAAT;AAGA,SAAOH,GAAP;AACD;;AAED,SAASI,MAAT,CAAgBL,MAAhB,EAAwBM,QAAxB,EAAkC;AAChC,MAAML,GAAG,+CAAwCL,SAAS,CAACM,YAAlD,cAAkEN,SAAS,CAACO,QAA5E,cAAwFH,MAAxF,mBACPJ,SAAS,CAACW,WAAV,CAAsBD,QAAtB,CADO,CAAT;AAGA,SAAOL,GAAP;AACD;;AAED,SAASO,MAAT,CAAgBR,MAAhB,EAAwBM,QAAxB,EAAkC;AAChC,MAAIG,IAAI,GAAGJ,MAAM,CAACL,MAAD,EAASM,QAAT,CAAjB;AACA,SAAOI,KAAK,CAACD,IAAD,CAAL,CAAYE,IAAZ,CAAiB,UAAAC,QAAQ,EAAI;AAClC,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAFM,CAAP;AAGD;;AAED,SAASC,cAAT,CAAwBL,IAAxB,EAA8B;AAC5BX,EAAAA,IAAI,CAAC,QAAD,EAAWD,QAAQ,CAACkB,SAAT,CAAmBN,IAAnB,CAAX,EAAqC,OAArC,CAAJ;AACD;;AAED,SAASO,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,UAAQA,KAAR;AACE,SAAKrB,SAAS,CAACsB,aAAf;AACE,aAAO,SAAP;;AACF;AACE,aAAO,SAAP;AAJJ;AAMD;;AAED,SACEnB,YADF,EAEEM,MAFF,EAGEG,MAHF,EAIEM,cAJF,EAKEE,SALF","sourcesContent":["import { constants } from '../constants';\nimport { messages } from '../messages';\nimport swal from 'sweetalert2';\n\nfunction addressesURL(branch) {\n  const URL = `https://raw.githubusercontent.com/${constants.organization}/${constants.repoName}/${branch}/${\n    constants.addressesSourceFile\n  }`\n  return URL;\n}\n\nfunction ABIURL(branch, contract) {\n  const URL = `https://raw.githubusercontent.com/${constants.organization}/${constants.repoName}/${branch}/abis/${\n    constants.ABIsSources[contract]\n  }`\n  return URL;\n}\n\nfunction getABI(branch, contract) {\n  let addr = ABIURL(branch, contract)\n  return fetch(addr).then(response => {\n    return response.json();\n  });\n}\n\nfunction wrongRepoAlert(addr) {\n  swal('Error!', messages.wrongRepo(addr), 'error');\n}\n\nfunction getBranch(netId) {\n  switch (netId) {\n    case constants.NETID_TESTNET:\n      return 'testnet';\n    default:\n      return 'testnet';\n  }\n}\n\nexport {\n  addressesURL,\n  ABIURL,\n  getABI,\n  wrongRepoAlert,\n  getBranch\n}"]},"metadata":{},"sourceType":"module"}