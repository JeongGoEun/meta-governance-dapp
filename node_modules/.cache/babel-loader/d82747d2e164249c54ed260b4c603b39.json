{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar AchievementManager =\n/*#__PURE__*/\nfunction () {\n  function AchievementManager() {\n    _classCallCheck(this, AchievementManager);\n  }\n\n  _createClass(AchievementManager, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _getAddresses, ACHIEVEMENT_MANAGER_ADDRESS, branch, achievementManagerAbi;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getAddresses = getAddresses(web3config.netid), ACHIEVEMENT_MANAGER_ADDRESS = _getAddresses.ACHIEVEMENT_MANAGER_ADDRESS;\n                branch = getBranch(web3config.netid);\n                _context.next = 4;\n                return getABI(branch, 'AchievementManager');\n\n              case 4:\n                achievementManagerAbi = _context.sent;\n                this.achievementManagerInstance = new web3.eth.Contract(achievementManagerAbi.abi, ACHIEVEMENT_MANAGER_ADDRESS);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function init() {\n        return _init.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAchievement\",\n    value: function () {\n      var _getAchievement = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(achievementID) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.achievementManagerInstance.methods.achievements) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 2:\n                return _context2.abrupt(\"return\", this.achievementManagerInstance.methods.achievements(achievementID).call());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getAchievement(_x) {\n        return _getAchievement.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllAchievements\",\n    value: function () {\n      var _getAllAchievements = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        var achievements, achievementIDs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                achievements = []; // Validate ABI\n\n                if (this.achievementManagerInstance.methods.allAchievements) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", achievements);\n\n              case 3:\n                _context4.next = 5;\n                return this.achievementManagerInstance.methods.allAchievements().call();\n\n              case 5:\n                achievementIDs = _context4.sent;\n                _context4.next = 8;\n                return Promise.all(achievementIDs.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(achievementID) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.t0 = achievements;\n                            _context3.next = 3;\n                            return _this.getAchievement(achievementID);\n\n                          case 3:\n                            _context3.t1 = _context3.sent;\n\n                            _context3.t0.push.call(_context3.t0, _context3.t1);\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 8:\n                return _context4.abrupt(\"return\", achievements);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function getAllAchievements() {\n        return _getAllAchievements.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return AchievementManager;\n}();\n\nexport { AchievementManager };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/AchievementManager.contract.js"],"names":["web3","web3config","getAddresses","getBranch","getABI","AchievementManager","netid","ACHIEVEMENT_MANAGER_ADDRESS","branch","achievementManagerAbi","achievementManagerInstance","eth","Contract","abi","achievementID","methods","achievements","call","allAchievements","achievementIDs","Promise","all","map","getAchievement","push"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;IAEMC,kB;;;;;;;;;;;;;;;;;;;gCAEsCH,YAAY,CAACD,UAAU,CAACK,KAAZ,C,EAA5CC,2B,iBAAAA,2B;AACFC,gBAAAA,M,GAASL,SAAS,CAACF,UAAU,CAACK,KAAZ,C;;uBAEYF,MAAM,CAACI,MAAD,EAAS,oBAAT,C;;;AAApCC,gBAAAA,qB;AACN,qBAAKC,0BAAL,GAAkC,IAAIV,IAAI,CAACW,GAAL,CAASC,QAAb,CAAsBH,qBAAqB,CAACI,GAA5C,EAAiDN,2BAAjD,CAAlC;;;;;;;;;;;;;;;;;;;iDAGmBO,a;;;;;oBAEb,KAAKJ,0BAAL,CAAgCK,OAAhC,CAAwCC,Y;;;;;kDACrC,I;;;kDAIF,KAAKN,0BAAL,CAAgCK,OAAhC,CAAwCC,YAAxC,CAAqDF,aAArD,EAAoEG,IAApE,E;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIHD,gBAAAA,Y,GAAe,E,EAEnB;;oBACM,KAAKN,0BAAL,CAAgCK,OAAhC,CAAwCG,e;;;;;kDACrCF,Y;;;;uBAIkB,KAAKN,0BAAL,CAAgCK,OAAhC,CAAwCG,eAAxC,GAA0DD,IAA1D,E;;;AAAvBE,gBAAAA,c;;uBAGEC,OAAO,CAACC,GAAR,CAAYF,cAAc,CAACG,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAmB,kBAAOR,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,2CACnCE,YADmC;AAAA;AAAA,mCACX,KAAI,CAACO,cAAL,CAAoBT,aAApB,CADW;;AAAA;AAAA;;AAAA,yCACtBU,IADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,C;;;kDAGCR,Y;;;;;;;;;;;;;;;;;;;AAIX,SAAQX,kBAAR","sourcesContent":["import web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nclass AchievementManager {\n  async init() {\n    const { ACHIEVEMENT_MANAGER_ADDRESS } = getAddresses(web3config.netid);\n    const branch = getBranch(web3config.netid);\n\n    const achievementManagerAbi = await getABI(branch, 'AchievementManager');\n    this.achievementManagerInstance = new web3.eth.Contract(achievementManagerAbi.abi, ACHIEVEMENT_MANAGER_ADDRESS);\n  }\n\n  async getAchievement(achievementID) {\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.achievements) {\n      return null;\n    }\n\n    // Call\n    return this.achievementManagerInstance.methods.achievements(achievementID).call();\n  }\n\n  async getAllAchievements() {\n    var achievements = [];\n\n    // Validate ABI\n    if (! this.achievementManagerInstance.methods.allAchievements) {\n      return achievements;\n    }\n\n    // Get achievement IDs\n    let achievementIDs = await this.achievementManagerInstance.methods.allAchievements().call();\n\n    // Make achievement list by iterating IDs\n    await Promise.all(achievementIDs.map(async (achievementID) => {\n      achievements.push(await this.getAchievement(achievementID));\n    }));\n    return achievements;\n  }\n}\n\nexport {AchievementManager}"]},"metadata":{},"sourceType":"module"}