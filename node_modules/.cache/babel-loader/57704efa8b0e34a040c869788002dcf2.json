{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nvar TopicRegistry =\n/*#__PURE__*/\nfunction () {\n  function TopicRegistry() {\n    _classCallCheck(this, TopicRegistry);\n  }\n\n  _createClass(TopicRegistry, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _getAddresses, TOPIC_REGISTRY_ADDRESS, branch, topicRegistryAbi;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getAddresses = getAddresses(web3config.netid), TOPIC_REGISTRY_ADDRESS = _getAddresses.TOPIC_REGISTRY_ADDRESS;\n                branch = getBranch(web3config.netid);\n                _context.next = 4;\n                return getABI(branch, 'TopicRegistry');\n\n              case 4:\n                topicRegistryAbi = _context.sent;\n                this.topicRegistryInstance = new web3.eth.Contract(topicRegistryAbi.abi, TOPIC_REGISTRY_ADDRESS);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function init() {\n        return _init.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"isRegistered\",\n    value: function () {\n      var _isRegistered = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(topicID) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.topicRegistryInstance.methods.isRegistered) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                return _context2.abrupt(\"return\", this.topicRegistryInstance.methods.isRegistered(topicID).call());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function isRegistered(_x) {\n        return _isRegistered.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getTopic\",\n    value: function () {\n      var _getTopic = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(topicID) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.topicRegistryInstance.methods.getTopic) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                return _context3.abrupt(\"return\", this.topicRegistryInstance.methods.getTopic(topicID).call());\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getTopic(_x2) {\n        return _getTopic.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getAllTopic\",\n    value: function () {\n      var _getAllTopic = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(_ref) {\n        var _this = this;\n\n        var handler, cb;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                handler = _ref.handler, cb = _ref.cb;\n\n                if (!(!handler || !cb)) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 3:\n                // NOTE: range and topicID will be fixed after test\n                Promise.all(_.range(20).map(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(id) {\n                    var topicID;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            topicID = id + 1020; // Execute handler from getTopic() when a topic was registered\n\n                            _context4.next = 3;\n                            return _this.isRegistered(topicID);\n\n                          case 3:\n                            if (!_context4.sent) {\n                              _context4.next = 6;\n                              break;\n                            }\n\n                            _context4.next = 6;\n                            return _this.getTopic(topicID).then(function (ret) {\n                              ret['id'] = topicID;\n                              handler(ret);\n                            });\n\n                          case 6:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n\n                  return function (_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }())).then(function () {\n                  return cb();\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function getAllTopic(_x3) {\n        return _getAllTopic.apply(this, arguments);\n      };\n    }()\n    /**\n     * @param {byte32} title\n     * @param {byte32} explanation \n     */\n\n  }, {\n    key: \"registerTopic\",\n    value: function registerTopic(title, explanation) {\n      // Validate ABI\n      if (!this.topicRegistryInstance.methods.registerTopic) return; // Return transaction param\n\n      return this.topicRegistryInstance.methods.registerTopic(title, explanation).send.request();\n    }\n  }]);\n\n  return TopicRegistry;\n}();\n\nexport { TopicRegistry };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/contracts/TopicRegistry.contract.js"],"names":["web3","web3config","getAddresses","getBranch","getABI","_","require","TopicRegistry","netid","TOPIC_REGISTRY_ADDRESS","branch","topicRegistryAbi","topicRegistryInstance","eth","Contract","abi","topicID","methods","isRegistered","call","getTopic","handler","cb","Promise","all","range","map","id","then","ret","title","explanation","registerTopic","send","request"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,WAAlC;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;IAEMC,a;;;;;;;;;;;;;;;;;;;gCAEiCL,YAAY,CAACD,UAAU,CAACO,KAAZ,C,EAAvCC,sB,iBAAAA,sB;AACFC,gBAAAA,M,GAASP,SAAS,CAACF,UAAU,CAACO,KAAZ,C;;uBAEOJ,MAAM,CAACM,MAAD,EAAS,eAAT,C;;;AAA/BC,gBAAAA,gB;AACN,qBAAKC,qBAAL,GAA6B,IAAIZ,IAAI,CAACa,GAAL,CAASC,QAAb,CAAsBH,gBAAgB,CAACI,GAAvC,EAA4CN,sBAA5C,CAA7B;;;;;;;;;;;;;;;;;;;iDAGiBO,O;;;;;oBAEX,KAAKJ,qBAAL,CAA2BK,OAA3B,CAAmCC,Y;;;;;;;;kDAGlC,KAAKN,qBAAL,CAA2BK,OAA3B,CAAmCC,YAAnC,CAAgDF,OAAhD,EAAyDG,IAAzD,E;;;;;;;;;;;;;;;;;;;iDAGMH,O;;;;;oBAEP,KAAKJ,qBAAL,CAA2BK,OAA3B,CAAmCG,Q;;;;;;;;kDAGlC,KAAKR,qBAAL,CAA2BK,OAA3B,CAAmCG,QAAnC,CAA4CJ,OAA5C,EAAqDG,IAArD,E;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGUE,gBAAAA,O,QAAAA,O,EAASC,E,QAAAA,E;;sBACtB,CAAED,OAAF,IAAa,CAAEC,E;;;;;;;;AAEnB;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYnB,CAAC,CAACoB,KAAF,CAAQ,EAAR,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAgB,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBX,4BAAAA,OADsB,GACZW,EAAE,GAAG,IADO,EAE1B;;AAF0B;AAAA,mCAGhB,KAAI,CAACT,YAAL,CAAkBF,OAAlB,CAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAIlB,KAAI,CAACI,QAAL,CAAcJ,OAAd,EAAuBY,IAAvB,CAA4B,UAAAC,GAAG,EAAI;AAAEA,8BAAAA,GAAG,CAAC,IAAD,CAAH,GAAYb,OAAZ;AAAqBK,8BAAAA,OAAO,CAACQ,GAAD,CAAP;AAAe,6BAAzE,CAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAhB;;AAAA;AAAA;AAAA;AAAA,oBAAZ,EAMID,IANJ,CAMS;AAAA,yBAAMN,EAAE,EAAR;AAAA,iBANT;;;;;;;;;;;;;;AASF;;;;;;;kCAIcQ,K,EAAOC,W,EAAa;AAChC;AACA,UAAI,CAAE,KAAKnB,qBAAL,CAA2BK,OAA3B,CAAmCe,aAAzC,EAAwD,OAFxB,CAIhC;;AACA,aAAO,KAAKpB,qBAAL,CAA2BK,OAA3B,CAAmCe,aAAnC,CAAiDF,KAAjD,EAAwDC,WAAxD,EAAqEE,IAArE,CAA0EC,OAA1E,EAAP;AACD;;;;;;AAGH,SAAQ3B,aAAR","sourcesContent":["import web3 from '../web3';\nimport web3config from '../web3-config.json';\nimport { getAddresses } from './addresses';\nimport { getBranch, getABI } from './helpers';\n\nvar _ = require('underscore');\n\nclass TopicRegistry {\n  async init() {\n    const { TOPIC_REGISTRY_ADDRESS } = getAddresses(web3config.netid);\n    const branch = getBranch(web3config.netid);\n\n    const topicRegistryAbi = await getABI(branch, 'TopicRegistry');\n    this.topicRegistryInstance = new web3.eth.Contract(topicRegistryAbi.abi, TOPIC_REGISTRY_ADDRESS);\n  }\n\n  async isRegistered(topicID) {\n    // Validate ABI\n    if (! this.topicRegistryInstance.methods.isRegistered) return;\n\n    // Call\n    return this.topicRegistryInstance.methods.isRegistered(topicID).call();\n  }\n\n  async getTopic(topicID) {\n    // Validate ABI\n    if (! this.topicRegistryInstance.methods.getTopic) return;\n\n    // Call\n    return this.topicRegistryInstance.methods.getTopic(topicID).call();\n  }\n\n  async getAllTopic({handler, cb}) {\n    if (! handler || ! cb) return;\n\n    // NOTE: range and topicID will be fixed after test\n    Promise.all(_.range(20).map(async (id) => {\n      let topicID = id + 1020;\n      // Execute handler from getTopic() when a topic was registered\n      if (await this.isRegistered(topicID)) {\n        await this.getTopic(topicID).then(ret => { ret['id'] = topicID; handler(ret); });\n      }\n    })).then(() => cb());\n  }\n\n  /**\n   * @param {byte32} title\n   * @param {byte32} explanation \n   */\n  registerTopic(title, explanation) {\n    // Validate ABI\n    if (! this.topicRegistryInstance.methods.registerTopic) return;\n\n    // Return transaction param\n    return this.topicRegistryInstance.methods.registerTopic(title, explanation).send.request();\n  }\n}\n\nexport {TopicRegistry}\n"]},"metadata":{},"sourceType":"module"}