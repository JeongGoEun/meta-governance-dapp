{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeong-go-eun/Desktop/metagate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\n/**\n * web3-config.json includes:\n *   - netid\n *   - url\n *   - addr\n *   - privkey\n *   - identity\n */\n\nimport web3config from './web3-config.json';\nvar privateKey = new Buffer(web3config.privkey, 'hex'); // Transaction.\n\nvar Tx = require('ethereumjs-tx');\n\nvar ethUtil = require('ethereumjs-util');\n\nvar web3 = new Web3(new Web3.providers.HttpProvider(web3config.url)); // Get TX data without nonce\n\nfunction getTxDataWoNonce(to, data) {\n  return {\n    gasLimit: web3.utils.toHex(40e3),\n    gasPrice: web3.utils.toHex(10e9),\n    // 10 Gwei\n    from: web3config.addr,\n    to: to,\n    data: data //,value: web3.utils.toHex(web3.utils.toWei('0.001', 'ether'))\n\n  };\n}\n\nfunction getTxData(_x, _x2) {\n  return _getTxData.apply(this, arguments);\n}\n\nfunction _getTxData() {\n  _getTxData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(to, data) {\n    var txData, txCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            txData = getTxDataWoNonce(to, data);\n            _context.next = 3;\n            return web3.eth.getTransactionCount(web3config.addr);\n\n          case 3:\n            txCount = _context.sent;\n            txData['nonce'] = txCount;\n            return _context.abrupt(\"return\", txData);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getTxData.apply(this, arguments);\n}\n\nfunction sign(msg) {\n  var hash = ethUtil.hashPersonalMessage(new Buffer(msg, 'hex'));\n  return ethUtil.ecsign(hash, privateKey, web3.version.network);\n}\n\nfunction signTx(txData) {\n  var transaction = new Tx(txData);\n  transaction.sign(privateKey);\n  return transaction.serialize();\n} // Signs the given transaction data and sends it. Abstracts some of the details \n// of buffering and serializing the transaction for web3.\n\n\nfunction sendSigned(txData, cb) {\n  web3.eth.sendSignedTransaction('0x' + signTx(txData).toString('hex'), cb);\n}\n\nfunction sendTransaction(_x3, _x4) {\n  return _sendTransaction.apply(this, arguments);\n}\n\nfunction _sendTransaction() {\n  _sendTransaction = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(to, data) {\n    var txData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getTxData(to, data);\n\n          case 2:\n            txData = _context2.sent;\n            sendSigned(signTx(txData), function (err, result) {\n              if (err) return console.log('error', err);\n              console.log('txid', result);\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _sendTransaction.apply(this, arguments);\n}\n\nexport default web3;\nexport { getTxData, getTxDataWoNonce, sign, signTx, sendSigned, sendTransaction };","map":{"version":3,"sources":["/Users/jeong-go-eun/Desktop/metagate/src/ethereum/web3.js"],"names":["Web3","web3config","privateKey","Buffer","privkey","Tx","require","ethUtil","web3","providers","HttpProvider","url","getTxDataWoNonce","to","data","gasLimit","utils","toHex","gasPrice","from","addr","getTxData","txData","eth","getTransactionCount","txCount","sign","msg","hash","hashPersonalMessage","ecsign","version","network","signTx","transaction","serialize","sendSigned","cb","sendSignedTransaction","toString","sendTransaction","err","result","console","log"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\n/**\n * web3-config.json includes:\n *   - netid\n *   - url\n *   - addr\n *   - privkey\n *   - identity\n */\nimport web3config from './web3-config.json';\nconst privateKey = new Buffer(web3config.privkey, 'hex');\n\n// Transaction.\nconst Tx = require('ethereumjs-tx');\nconst ethUtil = require('ethereumjs-util');\n\nconst web3 = new Web3(new Web3.providers.HttpProvider(web3config.url));\n\n// Get TX data without nonce\nfunction getTxDataWoNonce(to, data) {\n  return {\n    gasLimit: web3.utils.toHex(40e3),\n    gasPrice: web3.utils.toHex(10e9), // 10 Gwei\n    from: web3config.addr,\n    to: to,\n    data: data\n    //,value: web3.utils.toHex(web3.utils.toWei('0.001', 'ether'))\n  };\n}\n\nasync function getTxData(to, data) {\n  var txData = getTxDataWoNonce(to, data);\n\n  const txCount = await web3.eth.getTransactionCount(web3config.addr);\n  txData['nonce'] = txCount;\n  return txData;\n}\n\nfunction sign(msg) {\n  const hash = ethUtil.hashPersonalMessage(new Buffer(msg, 'hex'));\n  return ethUtil.ecsign(hash, privateKey, web3.version.network);\n}\n  \nfunction signTx(txData) {\n  const transaction = new Tx(txData);\n  transaction.sign(privateKey);\n  return transaction.serialize();\n}\n\n// Signs the given transaction data and sends it. Abstracts some of the details \n// of buffering and serializing the transaction for web3.\nfunction sendSigned(txData, cb) {\n  web3.eth.sendSignedTransaction('0x' + signTx(txData).toString('hex'), cb);\n}\n\nasync function sendTransaction(to, data) {\n  const txData = await getTxData(to, data);\n  sendSigned(signTx(txData), function(err, result) {\n    if (err) return console.log('error', err);\n    console.log('txid', result)\n  });\n}\n\nexport default web3;\nexport {\n  getTxData,\n  getTxDataWoNonce,\n  sign,\n  signTx,\n  sendSigned,\n  sendTransaction\n}"]},"metadata":{},"sourceType":"module"}